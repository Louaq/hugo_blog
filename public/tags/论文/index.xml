<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>论文 on Louaq lab</title>
    <link>http://localhost:1313/tags/%E8%AE%BA%E6%96%87/</link>
    <description>Recent content in 论文 on Louaq lab</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 19 Aug 2024 12:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E8%AE%BA%E6%96%87/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>说明文档</title>
      <link>http://localhost:1313/post/%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/</link>
      <pubDate>Mon, 19 Aug 2024 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;这篇文档主要介绍《基于YOLOv8的农田病虫害检测与分析》的代码实现部分，整篇论文的目的主要是改进YOLOv8的网络结构，使其在检测病虫害的精度和实时性上有所提升。接下来，我将介绍如何从零开始搭建起本项目。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;安装python&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%ae%89%e8%a3%85python&#34;&gt;&lt;/a&gt;&#xA;安装Python&#xA;&lt;/h1&gt;&lt;p&gt;到python的官方网站：&lt;a href=&#34;https://www.python.org/&#34;&gt;https://www.python.org/&lt;/a&gt;下载，安装&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/Snipaste_2024-05-23_15-10-42.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装完成后，在命令行窗口运行：python，查看安装的结果，如下图：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/Snipaste_2024-05-23_15-14-22.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;至此，Python安装完成，接下来还需要安装anaconda，这是一个python虚拟环境，特别适合管理python的环境。&lt;/p&gt;&#xA;&lt;h1 id=&#34;安装anaconda&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%ae%89%e8%a3%85anaconda&#34;&gt;&lt;/a&gt;&#xA;安装anaconda&#xA;&lt;/h1&gt;&lt;p&gt;到anaconda的官方网站：&lt;a href=&#34;https://www.anaconda.com/download/success&#34;&gt;https://www.anaconda.com/download/success&lt;/a&gt;下载，并安装：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/Snipaste_2024-05-23_15-17-10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装成功后，会在开始菜单出现如下图所示：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/Snipaste_2024-05-23_15-19-17.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;anaconda安装完成，接下来安装pycharm，主要用来编写代码。&lt;/p&gt;&#xA;&lt;h1 id=&#34;安装pycharm&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%ae%89%e8%a3%85pycharm&#34;&gt;&lt;/a&gt;&#xA;安装Pycharm&#xA;&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/Snipaste_2024-05-23_15-23-47.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;学生可以申请教育版&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/Snipaste_2024-05-23_15-24-59.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;支持，所有的软件安装完成。&lt;/p&gt;&#xA;&lt;h1 id=&#34;yolov8目录结构介绍&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#yolov8%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84%e4%bb%8b%e7%bb%8d&#34;&gt;&lt;/a&gt;&#xA;YOLOv8目录结构介绍&#xA;&lt;/h1&gt;&lt;p&gt;首先介绍整个项目的目录：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/Snipaste_2024-05-23_15-27-47.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/Snipaste_2024-05-23_15-28-07.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;和原来的YOLOv8相比，根目录新增一些训练的脚本和测试的脚本，比如train.py和Detect.py，当然也可以直接通过命令行的方式来实现，两者效果都是一样的。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;重点是ultralytics/nn目录，所有的改进模块都是在这里进行，在这里我新建了一个Addmodules的目录，里面是改进的各种模块，包括主干网络，颈部网络和检测头的改进。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/Snipaste_2024-05-23_15-36-15.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;需要修改的部分我都已经作了修改，不用再做其他的改动&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;还有一个重要的目录：ultralytics/cfg/models/Add，这里面放的都是yaml文件，其中改进的yaml文件都已经写好，不需要改动。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/Snipaste_2024-05-23_15-38-32.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以下是一个yaml文件的示例，其它的都是类似的结构，只是参数不同：&lt;/p&gt;&#xA;&lt;h1 id=&#34;安装项目的环境非常重要&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e5%ae%89%e8%a3%85%e9%a1%b9%e7%9b%ae%e7%9a%84%e7%8e%af%e5%a2%83%e9%9d%9e%e5%b8%b8%e9%87%8d%e8%a6%81&#34;&gt;&lt;/a&gt;&#xA;安装项目的环境（非常重要）&#xA;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;环境配置非常重要，我当时配环境换了一周左右的时间，中间经历了各种报错，软件包不兼容的问题和显卡驱动匹配的问题，总之就是不好搞。为了方面复现工作，我已经把anaconda的环境导出为environment.yml，位于项目的根目录里面，创建虚拟环境的时候直接使用就可以&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;anaconda虚拟环境&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#anaconda%e8%99%9a%e6%8b%9f%e7%8e%af%e5%a2%83&#34;&gt;&lt;/a&gt;&#xA;anaconda虚拟环境&#xA;&lt;/h2&gt;&lt;p&gt;再anaconda prompt终端输入conda env create -f environment.yml，就可以根据environment.yml文件创建虚拟环境，创建好后，通过conda env list查看环境是否存在，如下图所示就表明创建成功：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/Snipaste_2024-05-23_16-35-14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果安装的时候出现torch相关的错误，大概率是你的显卡驱动和这里面的torch包版本不匹配，这个问题需要自行修改即可，网上关于这方面的资料很多。&lt;/p&gt;&#xA;&lt;h2 id=&#34;使用虚拟环境&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e8%99%9a%e6%8b%9f%e7%8e%af%e5%a2%83&#34;&gt;&lt;/a&gt;&#xA;使用虚拟环境&#xA;&lt;/h2&gt;&lt;p&gt;虚拟环境创建完成之后，就可以在pycharm中使用，点击右下角，切换conda环境，选择刚才创建的虚拟环境。如果到了这一步还没有报错的话，恭喜你，已经完成了80%的工作。&lt;/p&gt;&#xA;&lt;p&gt;运行Detect.py脚本，测试检测效果，如果没有报错，接下来就是训练模型。&lt;/p&gt;&#xA;&lt;h1 id=&#34;训练脚本trainpy&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e8%ae%ad%e7%bb%83%e8%84%9a%e6%9c%actrainpy&#34;&gt;&lt;/a&gt;&#xA;训练脚本train.py&#xA;&lt;/h1&gt;&lt;p&gt;找到根目录的train.py文件，注释已经写的很清楚，如下图：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;warnings&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;warnings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filterwarnings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;ultralytics&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;YOLO&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;YOLO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;yolov8-HSFPN.yaml&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# model.load(&amp;#39;yolov8n.pt&amp;#39;) # 是否加载预训练权重,科研不建议大家加载否则很难提升精度&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;D:/Downloads/YOLOv8/datasets/data.yaml&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# 如果大家任务是其它的&amp;#39;ultralytics/cfg/default.yaml&amp;#39;找到这里修改task可以改成detect, segment, classify, pose&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;imgsz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;640&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;epochs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;single_cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 是否是单类别检测&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;batch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;close_mosaic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;workers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;device&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;optimizer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;SGD&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# using SGD&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# resume=&amp;#39;runs/train/exp21/weights/last.pt&amp;#39;, # 如过想续训就设置last.pt的地址&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;amp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 如果出现训练损失为Nan可以关闭amp&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;runs/train&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;exp&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;model = YOLO(&amp;lsquo;yolov8-HSFPN.yaml&amp;rsquo;)，把里面的yaml文件换成自己的yaml文件，我这里用的是yolov8-HSFPN.yaml，data=r&amp;rsquo;D:/Downloads/YOLOv8/datasets/data.yaml，同理，换成自己数据集的yaml文件，我这里的数据集是yolo格式。其它的参数可以按照自己的任务自行调整。&lt;/p&gt;</description>
    </item>
    <item>
      <title>报错</title>
      <link>http://localhost:1313/post/article_14/</link>
      <pubDate>Sun, 21 Apr 2024 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/article_14/</guid>
      <description>&lt;h2 id=&#34;一本文介绍&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e4%b8%80%e6%9c%ac%e6%96%87%e4%bb%8b%e7%bb%8d&#34;&gt;&lt;/a&gt;&#xA;一、本文介绍&#xA;&lt;/h2&gt;&lt;p&gt;本文为专栏内读者和我个人在训练&lt;strong&gt;YOLOv8时遇到的各种错误解决方案&lt;/strong&gt;，你遇到的问题本文基本上都能够解决。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二-报错问题&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#%e4%ba%8c-%e6%8a%a5%e9%94%99%e9%97%ae%e9%a2%98&#34;&gt;&lt;/a&gt;&#xA;二、 报错问题 &#xA;&lt;/h2&gt;&lt;p&gt;# 以下为两个重要库的版本，大家可以对应下载，使用教程我会更新，时间还没来得及大家可以先看视频使用。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;项目环境：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;python == 3.9.7&lt;/p&gt;&#xA;&lt;p&gt;pytorch == 1.12.1&lt;/p&gt;&#xA;&lt;p&gt;timm == 0.9.12&lt;/p&gt;&#xA;&lt;p&gt;mmcv-full == 1.6.2&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1训练过程中loss出现nan值&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#1%e8%ae%ad%e7%bb%83%e8%bf%87%e7%a8%8b%e4%b8%adloss%e5%87%ba%e7%8e%b0nan%e5%80%bc&#34;&gt;&lt;/a&gt;&#xA;(1)训练过程中loss出现Nan值.&#xA;&lt;/h3&gt;&lt;p&gt;可以尝试关闭AMP混合精度训练，如何关闭amp呢找到如下文件&amp;rsquo;ultralytics/cfg/default.yaml&amp;rsquo;，其中有一个参数是&lt;/p&gt;&#xA;\[True, False\]&lt;p&gt;, True runs AMP check&lt;/p&gt;&#xA;&lt;p&gt;我们将其设置为False即可，默认时为True。&lt;/p&gt;&#xA;&lt;p&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;2多卡训练问题修改模型以后不能支持多卡训练可以尝试下面的两行命令行操作两个是不同的操作是代表不同的版本现尝试第一个不行用第二个&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#2%e5%a4%9a%e5%8d%a1%e8%ae%ad%e7%bb%83%e9%97%ae%e9%a2%98%e4%bf%ae%e6%94%b9%e6%a8%a1%e5%9e%8b%e4%bb%a5%e5%90%8e%e4%b8%8d%e8%83%bd%e6%94%af%e6%8c%81%e5%a4%9a%e5%8d%a1%e8%ae%ad%e7%bb%83%e5%8f%af%e4%bb%a5%e5%b0%9d%e8%af%95%e4%b8%8b%e9%9d%a2%e7%9a%84%e4%b8%a4%e8%a1%8c%e5%91%bd%e4%bb%a4%e8%a1%8c%e6%93%8d%e4%bd%9c%e4%b8%a4%e4%b8%aa%e6%98%af%e4%b8%8d%e5%90%8c%e7%9a%84%e6%93%8d%e4%bd%9c%e6%98%af%e4%bb%a3%e8%a1%a8%e4%b8%8d%e5%90%8c%e7%9a%84%e7%89%88%e6%9c%ac%e7%8e%b0%e5%b0%9d%e8%af%95%e7%ac%ac%e4%b8%80%e4%b8%aa%e4%b8%8d%e8%a1%8c%e7%94%a8%e7%ac%ac%e4%ba%8c%e4%b8%aa&#34;&gt;&lt;/a&gt;&#xA;(2)多卡训练问题,修改模型以后不能支持多卡训练可以尝试下面的两行命令行操作，两个是不同的操作，是代表不同的版本现尝试第一个不行用第二个&#xA;&lt;/h3&gt;&lt;p&gt;    python -m torch.distributed.run &amp;ndash;nproc_per_node 2 train.py&lt;/p&gt;&#xA;&lt;p&gt;    python -m torch.distributed.launch &amp;ndash;nproc_per_node 2 train.py&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-针对运行过程中的一些报错解决&#34;&gt;&#xA;&lt;a class=&#34;header-anchor&#34; href=&#34;#3-%e9%92%88%e5%af%b9%e8%bf%90%e8%a1%8c%e8%bf%87%e7%a8%8b%e4%b8%ad%e7%9a%84%e4%b8%80%e4%ba%9b%e6%8a%a5%e9%94%99%e8%a7%a3%e5%86%b3&#34;&gt;&lt;/a&gt;&#xA;(3) 针对运行过程中的一些报错解决&#xA;&lt;/h3&gt;&lt;p&gt;    &lt;strong&gt;1.如果训练的过程中验证报错了(主要是一些形状不匹配的错误这是因为验证集的一些特殊图片导致)&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;就是有这种训练第一个epochs完成后开始验证的时候报错，下面的方法基本百分之九十都能够解决。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://yangyang666.oss-cn-chengdu.aliyuncs.com/typoraImages/e61c95278a244aebbe4ac67f07f90466.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;    找到ultralytics/models/yolo/detect/train.py的DetectionTrainer class中的build_dataset函数中的rect=mode == &amp;lsquo;val&amp;rsquo;改为rect=False&lt;/p&gt;&#xA;&lt;p&gt;    &lt;strong&gt;2.推理的时候运行detect.py文件报了形状不匹配的错误&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;    找到ultralytics/engine/predictor.py找到函数def pre_transform(self, im),在LetterBox中的auto改为False&lt;/p&gt;&#xA;&lt;p&gt;    &lt;strong&gt;3.训练的过程中报错类型不匹配的问题&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;    找到&amp;rsquo;ultralytics/engine/validator.py&amp;rsquo;文件找到 &amp;lsquo;class BaseValidator:&amp;rsquo; 然后在其&amp;rsquo;__call__&amp;lsquo;中&lt;/p&gt;&#xA;&lt;p&gt;    self.args.half = self.device.type != &amp;lsquo;cpu&amp;rsquo;  # force FP16 val during training的一行代码下面加上self.args.half = False&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
